import React, { useState, useCallback, useEffect } from 'react';
import { SafeAreaView, StatusBar, StyleSheet, View, Text, TouchableOpacity, KeyboardAvoidingView, Platform  } from 'react-native';
import { GiftedChat, IMessage, User, Bubble, InputToolbar, Composer, Send } from 'react-native-gifted-chat';
import { TypingAnimation } from 'react-native-typing-animation';
import { Ionicons } from '@expo/vector-icons'; // Import icons

// Define the structure for our user objects
interface ChatUser extends User {
    _id: string | number;
    name?: string;
    avatar?: string;
}

// --- User Definitions (assistantUser, currentUser) remain the same ---
const assistantUser: ChatUser = {
    _id: 2,
    name: 'Assistant',
    avatar: 'https://gravatar.com/avatar/b470aa3380645d168de8491c3a959eb5?s=400&d=retro&r=x',
};

const currentUser: ChatUser = {
    _id: 1,
    name: 'Demo'
};

// Define hex colors for easier use in style props
const COLORS = {
    background: '#000000', // gray-950
    userBubble: '#111827', // gray-700
    assistantBubble: '#000000', // gray-950 (same as background)
    textWhite: '#FFFFFF',
    textGray: '#D1D5DB', // gray-300
    inputBackground: '#111827', // gray-900
    sendButton: '#3B82F6', // blue-500
    placeholderGray: '#6B7280', // gray-500
};

const ChatScreen = () => {
    const [messages, setMessages] = useState<IMessage[]>([]);
    const [isTyping, setIsTyping] = useState(false);

    const demoResponses = [
      "Okay, I can help with that. What specific date are you looking for?",
      "Regarding company policy, can you specify which policy you're asking about (e.g., vacation, sick leave)?",
      "Got it. Let me check the available slots for you.",
      "Interesting question! Let me look up the details in our knowledge base.",
      "Sure thing. To proceed with booking, I'll need your full name and preferred time.",
  ];

    useEffect(() => {
        setMessages([
            {
                _id: Math.random().toString(36).substring(7),
                text: 'Hello! How can I help you with booking or company policy today?',
                createdAt: new Date(),
                user: assistantUser,
            },
        ]);
    }, []);

    const onSend = useCallback((newMessages: IMessage[] = []) => {
        console.log('Message sent:', newMessages);

        // 1. Append the user's message immediately
        setMessages((previousMessages) =>
            GiftedChat.append(previousMessages, newMessages)
        );

         // 2. Set the typing indicator to true
         setIsTyping(true);

         // 3. Simulate backend delay and response
         setTimeout(() => {
          // Choose a random response
          const randomIndex = Math.floor(Math.random() * demoResponses.length);
          const responseText = demoResponses[randomIndex];

          // Create the assistant's message object
          const assistantMessage: IMessage = {
              _id: Math.random().toString(36).substring(7), // Generate unique ID
              text: responseText,
              createdAt: new Date(),
              user: assistantUser, // Use the predefined assistant user
          };

          // 4. Append the assistant's message
          setMessages((previousMessages) =>
              GiftedChat.append(previousMessages, [assistantMessage])
          );

          // 5. Set the typing indicator back to false
          setIsTyping(false);

      }, 2000); // 1000 milliseconds = 1 second delay


        // --- TODO: Backend Logic ---
    }, []);

    // Custom Bubble Rendering
    const renderBubble = (props: Readonly<Bubble['props']>) => {
        return (
            <Bubble
                {...props}
                wrapperStyle={{
                    left: {
                        // Assistant bubble matches background
                        backgroundColor: COLORS.assistantBubble,
                        
                    },
                    right: {
                        // User bubble is darker gray
                        backgroundColor: COLORS.userBubble,
                        paddingVertical: 4,
                        paddingHorizontal: 8,
                        textAlign: 'center',
                        alignItems: 'center',
                    },
                }}
                textStyle={{
                    left: {
                        // Assistant text is white
                        fontSize: 15,
                        color: COLORS.textWhite,
                    },
                    right: {
                        // User text is white
                        fontSize: 15,
                        color: COLORS.textWhite,
                        lineHeight: 22
                    },
                }}
                // Optional: modify time text style
                timeTextStyle={{
                  left: { color: COLORS.textGray, height: 0 },
                  right: { color: COLORS.textGray, height: 0 },
              }}
                 // Optional: modify username style
                 usernameStyle={{
                    color: COLORS.textGray, // Adjust as needed
                    fontWeight: '500'
                 }}
            />
        );
    };

    // Custom Input Toolbar Rendering
    const renderInputToolbar = (props: Readonly<InputToolbar['props']>) => {
        return (
            <InputToolbar
                {...props}
                containerStyle={{
                    backgroundColor: 'black', // Match screen background
                    borderTopWidth: 0,
                    paddingHorizontal: 12, // Add some horizontal padding
                    paddingVertical: 8,   // Add some vertical padding
                }}
                primaryStyle={{ alignItems: 'center' }} // Align items vertically
            />
        );
    };

    // Custom Composer (Text Input) Rendering
    const renderComposer = (props: Readonly<Composer['props']>) => {
        return (
            <View className="flex-1 flex-row bg-gray-900 rounded-full items-center px-3 mr-2">
                 <Composer
                    {...props}
                    textInputStyle={{
                        color: COLORS.textWhite,
                        lineHeight: 20, // Adjust line height if needed
                        paddingTop: 8, // Fine-tune vertical alignment
                        paddingBottom: 8,
                        marginLeft: 5, // Space between potential icon and text
                    }}
                    placeholderTextColor={COLORS.placeholderGray} // Style the placeholder
                 />
                {/* You could add an icon inside the composer View here if desired */}
                <Ionicons name="add-circle-outline" size={24} color={COLORS.placeholderGray} style={{ marginLeft: 5 }} />
            </View>

        );
    };

    // Custom Send Button Rendering
    const renderSend = (props: Readonly<Send['props']>) => {
        // Only render if there is text
             return (
                <TouchableOpacity
                    className="bg-white rounded-full w-9 h-9 justify-center items-center mx-1" // Use NativeWind for styling
                    onPress={() => props.onSend?.({ text: props.text.trim() }, true)} // Call original onSend
                    accessibilityLabel="Send message"
                    disabled={!props.text?.trim()}
                >
                    <Ionicons name="arrow-up" size={20}  color={props.text?.trim() ? '#000000' : COLORS.placeholderGray} />
                </TouchableOpacity>
            );
    };

    const renderFooterComponent = () => {
      if (isTyping) {
          return (
              // Style the container for the typing animation
              <View style={styles.typingFooterContainer}>
                  <TypingAnimation
                      dotColor={COLORS.textGray} // Dots visible on dark background
                      dotMargin={5}
                      dotAmplitude={3}
                      dotSpeed={0.15}
                      dotRadius={3.5}
                  />
              </View>
          );
      }
      // Return null when not typing
      return null;
  };




    return (
        <View className="flex-1 bg-black">
            <StatusBar barStyle="light-content" />
                <GiftedChat
                    messages={messages}
                    onSend={onSend}
                    user={currentUser}
                    placeholder='Ask the bot...' // Shortened placeholder
                    renderAvatarOnTop={true}
                    alwaysShowSend={true} // Keep send button space visible
                    isTyping={isTyping}

                    // --- Custom Render Props ---
                    renderBubble={renderBubble}
                    renderInputToolbar={renderInputToolbar}
                    renderComposer={renderComposer}
                    renderSend={renderSend}
                    renderFooter={renderFooterComponent}
                    // --- ---
                />
        </View>
    );
};

export default ChatScreen;

const styles = StyleSheet.create({
  typingFooterContainer: {
      // Position it on the left, just above the input
      alignSelf: 'flex-start',
      marginLeft: 15, // Add some left margin
      marginBottom: 5, // Space above the input toolbar
      // Give it a subtle background or just let animation show
      // backgroundColor: COLORS.userBubble, // Optional background
      // paddingHorizontal: 12,            // Optional padding
      // paddingVertical: 8,               // Optional padding
      // borderRadius: 15,                 // Optional border radius
  },
  // ... other styles if you have any
});